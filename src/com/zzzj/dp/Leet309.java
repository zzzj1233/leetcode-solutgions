package com.zzzj.dp;

/**
 * @author zzzj
 * @create 2021-10-29 15:57
 */
public class Leet309 {

    /**
     * 给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格
     * <p>
     * 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
     * <p>
     * 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
     * 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
     * 示例:
     * <p>
     * 输入: [1,2,3,0,2]
     * 输出: 3
     * 解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]
     * <p>
     * 前言：不要关注冷冻期！不要关注冷冻期！不要关注冷冻期！
     * 只关注卖出的那一天！只关注卖出的那一天！只关注卖出的那一天！
     * 题目中定义的“冷冻期”=卖出的那一天的后一天，题目设置冷冻期的意思是，如果昨天卖出了，今天不可买入，那么关键在于哪一天卖出，只要在今天想买入的时候判断一下前一天是不是刚卖出，即可，所以关键的一天其实是卖出的那一天，而不是卖出的后一天
     * <p>
     * 正文：
     * 因为当天卖出股票实际上也是属于“不持有”的状态，那么第i天如果不持有，那这个“不持有”就有了两种状态：1.本来就不持有，指不是因为当天卖出了才不持有的；2.第i天因为卖出了股票才变得不持有
     * <p>
     * 而持有股票依旧只有一种状态
     * <p>
     * 所以对于每一天i，都有可能是三种状态：
     * 0.不持股且当天没卖出,定义其最大收益dp[i][0];
     * 1.持股,定义其最大收益dp[i][1]；
     * 2.不持股且当天卖出了，定义其最大收益dp[i][2]；
     * <p>
     */

    public static void main(String[] args) {
        System.out.println(maxProfit(new int[]{1, 2, 3, 0, 2}));
    }

    public static int maxProfit(int[] prices) {
        return -1;
    }

}
